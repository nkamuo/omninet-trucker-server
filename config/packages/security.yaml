security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            # TODO: Install and configure JWT authentication
            # composer require lexik/jwt-authentication-bundle
            # Then uncomment the following:
            # entry_point: jwt
            # json_login:
            #     check_path: /api/login
            #     username_path: email
            #     password_path: password
            #     success_handler: lexik_jwt_authentication.handler.authentication_success
            #     failure_handler: lexik_jwt_authentication.handler.authentication_failure
            # jwt: ~
            # refresh_jwt:
            #     check_path: /api/token/refresh

        main:
            lazy: true
            provider: app_user_provider

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
        - { path: ^/api/trucks$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/trucks/\d+$, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_TRUCK_OWNER, ROLE_RENTER, ROLE_USER]
        ROLE_TRUCK_OWNER: [ROLE_USER]
        ROLE_RENTER: [ROLE_USER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
